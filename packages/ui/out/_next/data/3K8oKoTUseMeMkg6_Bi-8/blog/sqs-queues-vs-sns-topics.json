{"pageProps":{"post":{"__typename":"Post","title":"SQS Queues vs SNS Topics","tags":["AWS"],"date":"2022-07-03","content":{"children":[{"type":"heading-two","children":[{"text":"Introduction"}]},{"type":"paragraph","children":[{"text":"A lot of infrastructure is built around the principles of sending data from one thing to another. There are many ways to do this but some of the most prevalent are via message queues and notifications. AWS offers services for both of these areas via SQS (for message queues) and SNS (for notifications)."}]},{"type":"heading-two","children":[{"text":"What is SQS?"}]},{"type":"paragraph","children":[{"text":"SQS stands for Simple Queue Service. It is a messaging queue service that automatically scales as required. Queues are primarily used to decouple parts of the architecture or integrate external applications. They’re also best suited for asynchronous processes you can fire and forget and where the order of events are important. One example may be a payment service where you want to prioritise customers who ordered first but don’t necessarily need to wait for the process to complete. SQS messages, if left unprocessed can be stored for up to 2 weeks, after which they will be deleted."}]},{"src":"https://media.graphassets.com/AKcILsJUSTOv8eK1HaPR","type":"image","title":"sqs.png","width":1079,"handle":"AKcILsJUSTOv8eK1HaPR","height":255,"children":[{"text":""}],"mimeType":"image/png"},{"type":"heading-two","children":[{"text":"What is SNS?"}]},{"type":"paragraph","children":[{"text":"SNS stands for Simple Notification Service. It is a publish-subscribe service that can be used to send SMS, mobile push notifications and email. Other AWS services such as SQS, Lambda, Kinesis and HTTPS endpoints can also be notified by subscribing to an SNS topic. SNS is best suited for scenarios where multiple consumers receive the same message but can process the message differently. One example of this might be for a food ordering app that generate an order confirmation message which can be sent via SNS to the delivery driver (on mobile), kitchen manager (on a table), and a Analytics tool (via API and Lambda)."}]},{"src":"https://media.graphassets.com/Hv7IMDQBRBezvnj3CYGf","type":"image","title":"sns.png","width":1091,"handle":"Hv7IMDQBRBezvnj3CYGf","height":661,"children":[{"text":""}],"mimeType":"image/png"},{"type":"heading-two","children":[{"text":"Push vs Pull"}]},{"type":"paragraph","children":[{"text":"SQS has a ‘pull’ mechanism, that is, consumers of SQS queues ‘pull’ messages from the queue and process them. For example, a consuming service continuously polls the message queue until it finds a message on the queue and processes it. While you can ‘trigger’ a lambda execution from a SQS message being in an SQS queue effectively making the queue event driven, in the background, AWS is doing the work to continuously poll the queue for you. SNS topics on the other hand, use a ‘push’ mechanism where messages are ‘pushed’ to subscribers when they are published to the SNS topic. One example of this would be pushing a text notification that users of an app have subscribed to. One key difference this means is that a single message sent to an SNS topic can be received by multiple subscribers. A single message put on an SQS queue on the other hand, can only be consumed by one receiver."}]},{"type":"heading-two","children":[{"text":"Standard vs FIFO"}]},{"type":"paragraph","children":[{"text":"Both SQS and SNS offer Standard and FIFO variations. The concepts between both are largely the same."}]},{"type":"heading-three","children":[{"text":"Standard Queues"}]},{"type":"paragraph","children":[{"bold":true,"text":"+"},{"text":" Near unlimited throughput of messages"}]},{"type":"paragraph","children":[{"bold":true,"text":"-"},{"text":" Best-effort ordering - Messages won’t always be processed in the order they were sent."}]},{"type":"paragraph","children":[{"bold":true,"text":"- "},{"text":"Messages at least once, but more than one copy can be sent occasionally - your consumer will need to be able to handle this."}]},{"type":"heading-three","children":[{"text":"FIFO Queues"}]},{"type":"paragraph","children":[{"bold":true,"text":"+"},{"text":" Messages are guaranteed to be delivered in the order they were sent"}]},{"type":"paragraph","children":[{"bold":true,"text":"+"},{"text":" Messages are delivered exactly once"}]},{"type":"paragraph","children":[{"bold":true,"text":"-"},{"text":" More limited throughput"}]},{"type":"paragraph","children":[{"text":"In short, unless you need a large amount of throughput FIFO queues seem to be the way to go for the majority of cases. You’ll get guaranteed only once delivery and be able to process messages in the order they were sent. One caveat is that if you want to send messages from an SNS topic to a SQS queue, you can’t send messages from a FIFO Topic to a Standard Queue - it must be a FIFO Topic to a FIFO queue."}]},{"type":"heading-two","children":[{"text":"Dead Letter Queues (DLQ)"}]},{"type":"paragraph","children":[{"text":"A Dead Letter Queue (DLQ) is a queue that is used to contain messages that could not be processed by a consumer of the main queue. When you create a normal queue, you can define a visibility timeout which is the amount of time a message is ‘hidden’ from other consumers while it is being processed by a consumer. Once the message has been processed within the visibility timeout, the message is deleted from the queue. If the consumer fails to process the message, then the message won’t be deleted so it can be picked up by another consumer and retried. Naturally, this can lead to a message being infinitely retried and so setting the number of retries and creating a DLQ can alleviate this. When a message fails more than the retry limit, it will be sent to the DLQ. The messages in DLQs can then be resent to the original queue for processing (if the issue that caused the consumer to fail was temporary) by a manual or automated process. Both SQS and SNS can make use of Dead Letter Queues but there are some key differences. While Dead Letter Queues are defined per-queue for SQS queues, for SNS, Dead Letter Queues are assigned per subscriber of the topic. Additionally, if you use a FIFO topic, or FIFO main queue, your DLQ must also be a FIFO queue."}]},{"type":"heading-two","children":[{"text":"SNS or SQS; which should I use?"}]},{"type":"paragraph","children":[{"text":"As with any development question like this, the answer is; it depends on your use case. A good rule of thumb is that if you need to send a single message to multiple consumers then SNS is your best choice, for single messages to single consumers; SQS is the way to go. Additionally, you’ll want to be aware of what you want to send messages to as things like mobile push notifications can only be sent by SNS topics. If your messages are time sensitive, SNS is also a better option due to its ‘push’ nature rather than polling for messages. If it’s likely that your consuming service might get overwhelmed by many messages, throttling the messages with an SQS queue is a great way to limit the throughput. SNS doesn’t persist its messages so if no consumers are available when the message is sent the message is lost and not processed. To solve this issue, you can use both sevices where many SQS queues subscribe to a single SNS topic. This means that when a message is sent via the SNS topic, the message is stored in SQS until it can be picked up by consumers - increasing durability. This also acts as a way to throttle the throughput of messages to specific consumers. A great example of where this architecture is useful is with order processing. In this example, a SNS Topic could send a message to multiple SQS queues to notify of a new order. Each SQS Queue could be related to a different department related to processing the order e.g warehouse, payment etc."}]},{"src":"https://media.graphassets.com/gxHdh7j2SkOfyKKAa7yQ","type":"image","title":"sns-and-sqs.png","width":1111,"handle":"gxHdh7j2SkOfyKKAa7yQ","height":643,"children":[{"text":""}],"mimeType":"image/png"},{"type":"heading-two","children":[{"text":"Summary"}]},{"type":"paragraph","children":[{"text":"SQS and SNS are great services each with their own ideal use cases. SQS is great for throttling downstream consumers and decoupling applications, SNS is great for sending single messages to many subscribers in a time-sensitive manner."}]},{"type":"heading-two","children":[{"text":"References"}]},{"type":"paragraph","children":[{"text":""},{"href":"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/welcom e.html#sqs-difference-from-amazon-mq-sns","type":"link","children":[{"text":"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/welcom\ne.html#sqs-difference-from-amazon-mq-sns"}],"openInNewTab":true},{"text":""}]}]},"readTime":5,"coverImage":{"alt":"Queue","__typename":"Asset","url":"https://media.graphassets.com/BCkaiO4gTRiEIF7GpaaU","height":669,"width":1000}}},"__N_SSG":true}